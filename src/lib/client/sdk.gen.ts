// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type {
	ReadBookcasesWithCountsGetData,
	ReadBookcasesWithCountsGetResponses,
	ReadBooksGetData,
	ReadBooksGetResponses,
	ReadBooksGetErrors,
	CreateBookPostData,
	CreateBookPostResponses,
	CreateBookPostErrors,
	DeleteBookDeleteData,
	DeleteBookDeleteResponses,
	DeleteBookDeleteErrors,
	ReadBookGetData,
	ReadBookGetResponses,
	ReadBookGetErrors,
	UpdateBookPatchData,
	UpdateBookPatchResponses,
	UpdateBookPatchErrors,
	GetBookByIsbnGetData,
	GetBookByIsbnGetResponses,
	GetBookByIsbnGetErrors,
	RootGetData,
	RootGetResponses
} from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<
	TData extends TDataShape = TDataShape,
	ThrowOnError extends boolean = boolean
> = ClientOptions<TData, ThrowOnError> & {
	/**
	 * You can provide a client instance returned by `createClient()` instead of
	 * individual options. This might be also useful if you want to implement a
	 * custom client.
	 */
	client?: Client;
	/**
	 * You can pass arbitrary values through the `meta` object. This can be
	 * used to access values that aren't defined as part of the SDK function.
	 */
	meta?: Record<string, unknown>;
};

/**
 * Read Bookcases With Counts
 * Retrieve all bookcases with a count of shelves and books per shelf.
 */
export const readBookcasesWithCountsGet = <ThrowOnError extends boolean = false>(
	options?: Options<ReadBookcasesWithCountsGetData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).get<
		ReadBookcasesWithCountsGetResponses,
		unknown,
		ThrowOnError
	>({
		url: '/api/bookcases/',
		...options
	});
};

/**
 * Read Books
 * Retrieve a list of books.
 */
export const readBooksGet = <ThrowOnError extends boolean = false>(
	options?: Options<ReadBooksGetData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).get<
		ReadBooksGetResponses,
		ReadBooksGetErrors,
		ThrowOnError
	>({
		url: '/api/books/',
		...options
	});
};

/**
 * Create Book
 * Create a new book, along with authors and categories if they don't exist.
 */
export const createBookPost = <ThrowOnError extends boolean = false>(
	options: Options<CreateBookPostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		CreateBookPostResponses,
		CreateBookPostErrors,
		ThrowOnError
	>({
		url: '/api/books/',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Book
 * Delete a book.
 */
export const deleteBookDelete = <ThrowOnError extends boolean = false>(
	options: Options<DeleteBookDeleteData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).delete<
		DeleteBookDeleteResponses,
		DeleteBookDeleteErrors,
		ThrowOnError
	>({
		url: '/api/books/{book_id}',
		...options
	});
};

/**
 * Read Book
 * Retrieve a single book by its ID.
 */
export const readBookGet = <ThrowOnError extends boolean = false>(
	options: Options<ReadBookGetData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).get<
		ReadBookGetResponses,
		ReadBookGetErrors,
		ThrowOnError
	>({
		url: '/api/books/{book_id}',
		...options
	});
};

/**
 * Update Book
 * Update a book's details.
 */
export const updateBookPatch = <ThrowOnError extends boolean = false>(
	options: Options<UpdateBookPatchData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).patch<
		UpdateBookPatchResponses,
		UpdateBookPatchErrors,
		ThrowOnError
	>({
		url: '/api/books/{book_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get Book By Isbn
 * gets book info by isbn
 */
export const getBookByIsbnGet = <ThrowOnError extends boolean = false>(
	options: Options<GetBookByIsbnGetData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).get<
		GetBookByIsbnGetResponses,
		GetBookByIsbnGetErrors,
		ThrowOnError
	>({
		url: '/api/isbn/{isbn}',
		...options
	});
};

/**
 * Root
 */
export const rootGet = <ThrowOnError extends boolean = false>(
	options?: Options<RootGetData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).get<RootGetResponses, unknown, ThrowOnError>({
		url: '/',
		...options
	});
};
